@page "/configure"
@inject HttpClient Http

<!-- Chat Binary -->
<small>Path to the chat binary executable</small><br />
<label>Chat Binary: <input type="text" @bind="Arguments.ChatBinary" /></label>
<br />

<!-- Interactive -->
<small>Enable interactive mode</small><br />
<label>Interactive: <input type="checkbox" @bind="Arguments.Interactive" /></label>
<br />

<!-- Interactive Start -->
<small>Start the interactive session immediately</small><br />
<label>Interactive Start: <input type="checkbox" @bind="Arguments.InteractiveStart" /></label>
<br />

<!-- Reverse Prompt -->
<small>Reverse the order of input and output in the prompt</small><br />
<label>Reverse Prompt: <input type="text" @bind="Arguments.ReversePrompt" /></label>
<br />

<!-- Color -->
<small>Enable colored output</small><br />
<label>Color: <input type="checkbox" @bind="Arguments.Color" /></label>
<br />

<!-- Seed -->
<small>Random seed for reproducible results</small><br />
<label>Seed: <input type="number" @bind="Arguments.Seed" /></label>
<br />

<!-- Threads -->
<small>Number of threads to use for parallelism</small><br />
<label>Threads: <input type="number" @bind="Arguments.Threads" /></label>
<br />

<!-- Prompt -->
<small>Text prompt for the chat model</small><br />
<label>Prompt: <input type="text" @bind="Arguments.Prompt" /></label>
<br />

<!-- File -->
<small>Path to a text file containing prompts</small><br />
<label>File: <input type="text" @bind="Arguments.File" /></label>
<br />

<!-- N Predict -->
<small>Number of tokens to generate</small><br />
<label>N Predict: <input type="number" @bind="Arguments.NPredict" /></label>
<br />

<!-- Top K -->
<small>Number of top candidates to consider for sampling</small><br />
<label>Top K: <input type="number" @bind="Arguments.TopK" /></label>
<br />

<!-- Top P -->
<small>Probability threshold for top candidates</small><br />
<label>Top P: <input type="number" step="0.01" @bind="Arguments.TopP" /></label>
<br />

<!-- Repeat Last N -->
<small>Number of tokens to consider for repetition penalty</small><br />
<label>Repeat Last N: <input type="number" @bind="Arguments.RepeatLastN" /></label>
<br />

<!-- Repeat Penalty -->
<small>Penalty applied to repeating tokens</small><br />
<label>Repeat Penalty: <input type="number" step="0.01" @bind="Arguments.RepeatPenalty" /></label>
<br />

<!-- Ctx Size -->
<small>Context size in tokens</small><br />
<label>Ctx Size: <input type="number" @bind="Arguments.CtxSize" /></label>
<br />

<!-- Temp -->
<small>Temperature for sampling diversity</small><br />
<label>Temp: <input type="number" step="0.01" @bind="Arguments.Temp" /></label>
<br />

<!-- Batch Size -->
<small>Number of samples to generate in parallel</small><br />
<label>Batch Size: <input type="number" @bind="Arguments.BatchSize" /></label>
<br />

<!-- Model -->
<small>Path to the pretrained model</small><br />
<label>Model: <input type="text" @bind="Arguments.Model" /></label>
<br />

<!-- Context Memory -->
<small>Amount of context memory in tokens</small><br />
<label>Context Memory: <input type="number" @bind="Arguments.ContextMemory" /></label>

<button @onclick="ConfigureChatBinary">Configure Chat Binary</button>
<p>@OutputMessage</p>

@code {
    ChatArguments Arguments { get; set; } = new ChatArguments
    {
        Threads = 4,
        Seed = 1682472206,
        TopP = .95,
        TopK = 40,
        NPredict = 100,
        Temp = 0.1,
        RepeatPenalty = 1.3,
        CtxSize = 2048,
        RepeatLastN = 64,
        Prompt = "",
        Additional = "",
        ContextMemory = 0,
    };

    string OutputMessage { get; set; } = "";

    async Task ConfigureChatBinary()
    {
        string apiUrl = "http://localhost:5000/configure";

        var args = Arguments.ToArgsList();
        var config = new { args, chat_binary = Arguments.ChatBinary };

        var response = await Http.PostAsJsonAsync(apiUrl, config);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ConfigureResult>();
            OutputMessage = $"Status: {result.Status}, Message: {result.Message}";

            // Send an empty message to the chat endpoint to get the initial output
            response = await Http.PostAsJsonAsync("http://localhost:5000/chat", new { input = Arguments.Prompt });

            if (response.IsSuccessStatusCode)
            {
                var chatResult = await response.Content.ReadFromJsonAsync<ChatResult>();
                OutputMessage += $", Response: {chatResult.Output}";
            }
            else
            {
                OutputMessage += $", Error: {response.StatusCode}";
            }
        }
        else
        {
            OutputMessage = $"Error: {response.StatusCode}";
        }
    }





    public class ConfigureResult
    {
        public string Status { get; set; }
        public string Message { get; set; }
        public List<string> Response { get; set; }
    }
    public class ChatResult
    {
        public string Output { get; set; }
    }

    public class ChatArguments
    {
        public string ChatBinary { get; set; }
        public bool Interactive { get; set; }
        public bool InteractiveStart { get; set; }
        public string ReversePrompt { get; set; }
        public bool Color { get; set; }
        public int Seed { get; set; }
        public int Threads { get; set; }
        public string Prompt { get; set; } = "The following is a friendly conversation between human and AI called Al. AI is talkative and provides details from its context."; // Add this line
        public string File { get; set; }
        public int NPredict { get; set; }
        public int TopK { get; set; }
        public double TopP { get; set; }
        public int RepeatLastN { get; set; }
        public double RepeatPenalty { get; set; }
        public int CtxSize { get; set; }
        public double Temp { get; set; }
        public int BatchSize { get; set; }
        public string Model { get; set; }
        public string Additional { get; set; }
        public int ContextMemory { get; set; } = 0; // Add this line
        public List<string> ToArgsList()
        {
            var args = new List<string>();
            
            if (Interactive) args.Add("-i");
            if (InteractiveStart) args.Add("--interactive-start");
            if (!string.IsNullOrEmpty(ReversePrompt)) args.AddRange(new[] { "-r", ReversePrompt });
            if (Color) args.Add("--color");
            if (Seed != 0) args.AddRange(new[] { "-s", Seed.ToString() });
            if (Threads != 0) args.AddRange(new[] { "-t", Threads.ToString() });
            if (!string.IsNullOrEmpty(Prompt)) args.AddRange(new[] { "-p", Prompt });
            if (!string.IsNullOrEmpty(File)) args.AddRange(new[] { "-f", File });
            if (NPredict != 0) args.AddRange(new[] { "-n", NPredict.ToString() });
            if (TopK != 0) args.AddRange(new[] { "--top_k", TopK.ToString() });
            if (TopP != 0) args.AddRange(new[] { "--top_p", TopP.ToString() });
            if (RepeatLastN != 0) args.AddRange(new[] { "--repeat_last_n", RepeatLastN.ToString() });
            if (RepeatPenalty != 0) args.AddRange(new[] { "--repeat_penalty", RepeatPenalty.ToString() });
            if (CtxSize != 0) args.AddRange(new[] { "-c", CtxSize.ToString() });
            if (Temp != 0) args.AddRange(new[] { "--temp", Temp.ToString() });
            if (BatchSize != 0) args.AddRange(new[] { "-b", BatchSize.ToString() });
            if (!string.IsNullOrEmpty(Model)) args.AddRange(new[] { "-m", Model });
            if (ContextMemory != 0) args.AddRange(new[] { "--context_memory", ContextMemory.ToString() });

            return args;
        }
    }

}
