@page "/todo"
@using BlazorChatToolKit.Shared
@using BlazorChatToolKit.Shared.EncryptProviders
@using Blazored.LocalStorage
@using OpenAI_API;
@using System.Net;
@using System.Text.Json;

@inject ISyncLocalStorageService localStorage
@inject IJSRuntime Js
<PageTitle>Blazor Todo List</PageTitle>

<div class="h1 mb-4 text-center">
    Blazor Todo List
</div>
<div class="h5 mb-4 text-center">
    Demonstrates encrypted and decrypted todo storage in Local Storage and the use of GPT-4 to generate todo suggestions.
</div>
<div class="container">
    <div class="row">
        <div>
            <div>
                <div class="form-group h5 mb-4 text-center">
                    <label>Add Todo:</label>
                    <div class="dropdown">
                        <input @oninput="GetTodoSuggestions" type="text" class="form-control my-4 text-center py-2 m-auto" style="max-width:600px;" @bind="@TodoContent" placeholder="Add your todo here" />
                        @if (Suggestions.Any())
                        {
                            <div class="dropdown-menu text-center clear" aria-labelledby="dropdownMenuButton" style="display:block; max-height:200px; overflow-y:auto; position: relative;">
                                @foreach (var suggestion in Suggestions)
                                {
                                    <a class="dropdown-item text-center clear" href="javascript:void(0)" @onclick="() => SelectSuggestion(suggestion)">@suggestion</a>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="form-group text-center clear">
            <button class="btn btn-primary mb-4 px-2" style="max-width:200px;" @onclick="@AddTodo">Add Todo</button>&nbsp;
        </div>
    </div>
</div>




<div class="d-flex justify-content-center text-center">
    <div id="todo-container" class="todo-container">
        @foreach (var todo in Todos)
        {
            <div class="todo-item">
                <span>@todo.Content</span>
            </div>
        }
    </div>
</div>

@code {
    [Inject] IEncryptProvider? EncryptProvider { get; set; }
    [Inject] ILocalStorageService? LocalStorage { get; set; }

    public string OriginalText { get; set; } = "";
    public string EncryptedText { get; set; } = "";
    private string APIKey = "";
    public string TodoContent { get; set; } = "";
    private List<TodoItem> Todos { get; set; } = new List<TodoItem>();
    private List<string> Suggestions { get; set; } = new List<string>();

    private class TodoItem
    {
        public string Content { get; set; } = "";
    }

    private async Task AddTodo()
    {
        var encryptedTodo = await EncryptProvider.Encrypt(TodoContent);
        await LocalStorage.SetItemAsync<string>(TodoContent, encryptedTodo);
        var decryptedTodo = await EncryptProvider.Decrypt<string>(encryptedTodo);
        Todos.Add(new TodoItem { Content = decryptedTodo });
        TodoContent = "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            EncryptedText = await LocalStorage.GetItemAsync<string>("SampleKey");
            var todoKeysJson = await EncryptProvider.Decrypt<string>(EncryptedText);
            var todoKeys = JsonSerializer.Deserialize<List<string>>(todoKeysJson);
            foreach (var key in todoKeys)
            {
                var encryptedTodo = await LocalStorage.GetItemAsync<string>(key);
                var decryptedTodo = await EncryptProvider.Decrypt<string>(encryptedTodo);
                Todos.Add(new TodoItem { Content = decryptedTodo });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error initializing component: " + ex.Message);
        }
    }


    private async Task GetTodoSuggestions(ChangeEventArgs e)
    {
        TodoContent = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(TodoContent))
        {
            Suggestions = await GetCompletions(TodoContent);
        }
        else
        {
            Suggestions.Clear();
        }
        StateHasChanged();
    }

    private async Task<List<string>> GetCompletions(string prompt)
    {
        EncryptedText = await LocalStorage.GetItemAsync<string>("SampleKey");
        APIKey = await EncryptProvider.Decrypt<string>(EncryptedText);
        List<string> suggestions = new List<string>();
        try
        {
            var openai = new OpenAIAPI(APIKey);
            CompletionRequest completion = new CompletionRequest();
            completion.Prompt = $@"I need suggestions for a todo item related to {prompt}. Please provide one task per line based on the following examples:
            Input: 'get', Task: 'eggs'
            Input: 'get', Task: 'milk'
            Input: 'get', Task: 'dog food'
            Input: 'pay', Task: 'bills'
            Input: 'pay', Task: 'credit card'
            Input: 'pay', Task: 'mortgage'
            Input: 'clean', Task: 'kitchen'
            Input: 'clean', Task: 'bathroom'
            Input: 'clean', Task: 'living room'
            Input: 'call', Task: 'mom'
            Input: 'call', Task: 'dad'
            Input: 'call', Task: 'friend'
            Input: 'organize', Task: 'closet'
            Input: 'organize', Task: 'desk'
            Input: 'organize', Task: 'garage'
            For the input {prompt}, provide one task per line:";



            completion.Model = Model.DavinciText;
            completion.MaxTokens = 50;
            completion.NumChoicesPerPrompt = 5;
            var result = await openai.Completions.CreateCompletionAsync(completion);

            if (result != null)
            {
                var lines = result.Completions[0].Text.Split('\n');
                foreach (var line in lines)
                {
                    var trimmedLine = line.Trim();
                    if (!string.IsNullOrWhiteSpace(trimmedLine))
                    {
                        suggestions.Add(trimmedLine);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting completions: " + ex.Message);
        }
        return suggestions;
    }


    private void SelectSuggestion(string suggestion)
    {
        TodoContent = suggestion;
        Suggestions.Clear();
    }
}

