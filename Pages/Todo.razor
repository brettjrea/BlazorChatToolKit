@page "/todo"
@using BlazorChatToolKit.Shared
@using BlazorChatToolKit.Shared.EncryptProviders
@using Blazored.LocalStorage
@using OpenAI_API;
@using System.Net;
@using System.Text.Json;

@inject ISyncLocalStorageService localStorage
@inject IJSRuntime Js
<PageTitle>Blazor Todo List</PageTitle>

<div class="h1 mb-4 text-center">
    Blazor Todo List
</div>
<div class="h5 mb-4 text-center">
    Demonstrates encrypted and decrypted todo storage in Local Storage and the use of GPT to generate todo suggestions.
</div>
<div class="container">
    <div class="row">
        <div>
            <div>
                <div class="form-group h5 mb-4 text-center">
                    <label>Add Todo:</label>
                    <div class="dropdown">
                        <input @oninput="GetTodoSuggestions" type="text" class="form-control my-4 text-center py-2 m-auto" style="max-width:600px;" @bind="@TodoContent" placeholder="Add your todo here" />
                        @if (Suggestions.Any())
                        {
                            <div class="dropdown-menu my-4 text-center py-2 m-auto" aria-labelledby="dropdownMenuButton" style="display:block; max-width:600px; overflow-y:auto; position: relative;">
                                @foreach (var suggestion in Suggestions)
                                {
                                    <a class="dropdown-item text-center clear" href="javascript:void(0)" @onclick="() => SelectSuggestion(suggestion)">@suggestion</a>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="form-group text-center clear">
            <button class="btn btn-primary mb-4 px-2" style="max-width:200px;" @onclick="@AddTodo">Add Todo</button>&nbsp;
        </div>
    </div>
</div>




<div class="d-flex justify-content-center text-center">
    <div id="todo-container" class="todo-container">
        @foreach (var todo in Todos)
        {
            <div class="todo-item">
                <input type="checkbox" @bind="todo.IsDone" />&nbsp;
                <span>@todo.Content</span>
            </div>
        }
    </div>
</div>
<div class="form-group text-center clear">
    <button class="btn btn-primary mb-4 px-2 remove-completed" style="max-width:200px;" @onclick="@RemoveCompletedTodos">Remove Completed Todos</button>&nbsp;
</div>

@code {
    [Inject] IEncryptProvider? EncryptProvider { get; set; }
    [Inject] ILocalStorageService? LocalStorage { get; set; }

    public string OriginalText { get; set; } = "";
    public string EncryptedText { get; set; } = "";
    private string APIKey = "";
    public string TodoContent { get; set; } = "";
    private List<string> TodoKeys { get; set; }
    private List<TodoItem> Todos { get; set; } = new List<TodoItem>();
    private List<string> Suggestions { get; set; } = new List<string>();

    private class TodoItem
    {
        public string Content { get; set; } = "";
        public bool IsDone { get; set; } = false;
    }

    private async Task AddTodo()
    {
        var encryptedTodo = await EncryptProvider.Encrypt(TodoContent);
        await LocalStorage.SetItemAsync<string>(TodoContent, encryptedTodo);
        var decryptedTodo = await EncryptProvider.Decrypt<string>(encryptedTodo);
        Todos.Add(new TodoItem { Content = decryptedTodo });

        // Save the todo key to the list of keys
        TodoKeys.Add(TodoContent);
        var todoKeysJson = JsonSerializer.Serialize(TodoKeys);
        var encryptedKeys = await EncryptProvider.Encrypt(todoKeysJson);
        await LocalStorage.SetItemAsync<string>("TodoKeys", encryptedKeys);

        TodoContent = "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            EncryptedText = await LocalStorage.GetItemAsync<string>("TodoKeys");
            if (!string.IsNullOrEmpty(EncryptedText))
            {
                var todoKeysJson = await EncryptProvider.Decrypt<string>(EncryptedText);
                TodoKeys = JsonSerializer.Deserialize<List<string>>(todoKeysJson);
                foreach (var key in TodoKeys)
                {
                    var encryptedTodo = await LocalStorage.GetItemAsync<string>(key);
                    var decryptedTodo = await EncryptProvider.Decrypt<string>(encryptedTodo);
                    Todos.Add(new TodoItem { Content = decryptedTodo });
                }
            }
            else
            {
                TodoKeys = new List<string>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error initializing component: " + ex.Message);
        }
    }




    private async Task GetTodoSuggestions(ChangeEventArgs e)
    {
        TodoContent = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(TodoContent))
        {
            Suggestions = await GetCompletions(TodoContent);
        }
        else
        {
            Suggestions.Clear();
        }
        StateHasChanged();
    }

    private async Task<List<string>> GetCompletions(string prompt)
    {
        EncryptedText = await LocalStorage.GetItemAsync<string>("SampleKey");
        APIKey = await EncryptProvider.Decrypt<string>(EncryptedText);
        List<string> suggestions = new List<string>();
        try
        {
            var openai = new OpenAIAPI(APIKey);
            CompletionRequest completion = new CompletionRequest();
            completion.Prompt = $@"Based on the keyword '{prompt}', provide 5 diverse and practical todo tasks that start with the given keyword. Consider a wide range of tasks related to the input, from daily chores to personal goals. Please provide the tasks with each task on a separate line.

            Examples:
            Input: 'exercise'
            Tasks:
            Exercise for 30 minutes
            Exercise by attending a yoga class
            Exercise with a new workout video
            Exercise by swimming laps at a local pool
            Exercise with a strength training session

            Input: 'read'
            Tasks:
            Read a chapter of a novel
            Read a news article
            Read a scientific research paper
            Read a non-fiction book
            Read a magazine

            Input: 'cook'
            Tasks:
            Cook a healthy dinner
            Cook a new recipe
            Cook a meal for a friend
            Cook a batch of cookies
            Cook a meal to freeze for later

            Now, for the input '{prompt}', please provide 5 diverse and practical tasks, with each task starting with the given keyword and presented on a separate line:";





            completion.Model = Model.DavinciText;
            completion.MaxTokens = 50;
            completion.NumChoicesPerPrompt = 5;
            var result = await openai.Completions.CreateCompletionAsync(completion);

            if (result != null)
            {
                var lines = result.Completions[0].Text.Split('\n');
                foreach (var line in lines)
                {
                    var trimmedLine = line.Trim();
                    if (!string.IsNullOrWhiteSpace(trimmedLine))
                    {
                        suggestions.Add(trimmedLine);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting completions: " + ex.Message);
        }
        return suggestions;
    }


    private void SelectSuggestion(string suggestion)
    {
        TodoContent = suggestion;
        Suggestions.Clear();
    }
    private async Task RemoveCompletedTodos()
{
    Todos.RemoveAll(todo => todo.IsDone);

    // Update the stored todo keys and items
    TodoKeys.RemoveAll(key => Todos.All(todo => todo.Content != key));

    var todoKeysJson = JsonSerializer.Serialize(TodoKeys);
    var encryptedKeys = await EncryptProvider.Encrypt(todoKeysJson);
    await LocalStorage.SetItemAsync<string>("TodoKeys", encryptedKeys);

    foreach (var todo in Todos)
    {
        var encryptedTodo = await EncryptProvider.Encrypt(todo.Content);
        await LocalStorage.SetItemAsync<string>(todo.Content, encryptedTodo);
    }
}
}

