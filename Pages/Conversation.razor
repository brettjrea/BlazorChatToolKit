@page "/conversation"
@using BlazorChatToolKit.Shared
@using BlazorChatToolKit.Shared.EncryptProviders
@using Blazored.LocalStorage
@using OpenAI_API;
@using OpenAI_API.Images;
@using System.Net;

@inject ISyncLocalStorageService localStorage
@inject IJSRuntime Js
<PageTitle>BlazorChatToolKit</PageTitle>

<div class="h1 mb-4 text-center">
    BlazorChatToolKit
</div>
<div style="line-height:40px;" class="h5 mb-4 text-center">
    Demonstrates encrypted and decrypted key storage in Local Storage and the use of GPT-3 to generate a text response, creates a message list.
</div>
<div class="container">
    <div class="row">
        <div>
            <div>

                <div class="form-group h5 mb-4 text-center">
                    <label>Encrypt and Store API Key in Local Storage:</label>
                    <input type="text" class="form-control my-4 text-center py-2 m-auto" style="max-width:600px;" @bind-value="@OriginalText" placeholder="Paste your API Key here" />
                </div>

                <div class="form-group text-center">
                    <button class="btn btn-primary mb-4 px-2" style="max-width:200px;" @onclick="@EncryptandStore">Encrypt and Store</button>&nbsp;
                </div>
            </div>
        </div>
    </div>
</div>

<div class="d-flex justify-content-center text-center">
    <div id="conversation-container" class="message-container">
        @foreach (var message in Messages)
        {
            @if (message.IsUserMessage)
            {
                <div class="user-message">
                    <span>@message.Content</span>
                </div>
            }
            else
            {
                <div class="gpt-response">
                    @if (message.Content.Contains("<img"))
                    {
                        <div>@(new MarkupString(message.Content))</div>
                    }
                    else
                    {
                        <span>@message.Content</span>
                    }
                </div>
            }
        }
    </div>
</div>


<div class="form-group text-center">
    <div class="form-check d-inline-block w-33" style="max-width: 200px;">
        <input class="form-check-input mx-2" type="radio" name="apiOption" value="chat" id="useChatRadio" checked="@(!generateImage && !useCompletions)" @onclick="@(() => { useCompletions = false; generateImage = false; })">
        <label class="form-check-label" for="useChatRadio">Chat API</label>
    </div>
    <div class="form-check d-inline-block w-33" style="max-width: 200px;">
        <input class="form-check-input mx-2" type="radio" name="apiOption" id="useCompletionsRadio" checked="@useCompletions" @onclick="@(() => { useCompletions = true; generateImage = false; })">
        <label class="form-check-label" for="useCompletionsRadio" style="display:flex; align-items:center;">
            <span>Use Completions API</span>
        </label>
    </div>
    <div class="form-check d-inline-block w-33" style="max-width: 200px;">
        <input class="form-check-input mx-2" type="radio" name="apiOption" id="generateImageRadio" checked="@generateImage" @onclick="@(() => { generateImage = true; useCompletions = false; })">
        <label class="form-check-label" for="generateImageRadio" style="display:flex; align-items:center;">
            <span>Generate Image</span>
        </label>
    </div>


    <input class="form-control my-4 text-center py-2 m-auto" style="max-width:600px;" type="text" @bind="@message"
           placeholder="Type your message here" />
    <button class="btn btn-success mb-4 px-2" style="max-width:200px;" @onclick="@GetResponseFromGPT3">
        Decrypt and Submit
    </button>
</div>




@code {
    [Inject] IEncryptProvider? EncryptProvider { get; set; }
    [Inject] ILocalStorageService? LocalStorage { get; set; }

    public string OriginalText { get; set; } = "";
    public string EncryptedText { get; set; } = "";
    private string APIKey = "";
    private string message = "";
    private string generatedText = "";
    private List<Message> Messages { get; set; } = new List<Message>();

    async Task EncryptandStore()
    {
        EncryptedText = await EncryptProvider.Encrypt(OriginalText);
        await LocalStorage.SetItemAsync<string>("SampleKey", EncryptedText);
        OriginalText = "";    
    }

    async Task ReadandDecrypt()
    {
        EncryptedText = await LocalStorage.GetItemAsync<string>("SampleKey"); 
        OriginalText = await EncryptProvider.Decrypt<string>(EncryptedText);
     
    }

    private bool generateImage = false;
    private bool useCompletions = false;

    public class Message
    {
        public string Content { get; set; } = "";
        public bool IsUserMessage { get; set; } = false;
        public bool IsImage { get; set; }  // add this property
    }

    public static class GPT3Response
    {
        public static string Response { get; set; } = "";
    }

    private async Task GetResponseFromGPT3()
    {
        if (generateImage)
        {
            await GetImageFromDALLE();
        }
        else if (!generateImage && !useCompletions)
        {
            await GetChat();
        }
        else
        {
            await GetCompletions();
        }
    }


    private async Task GetImageFromDALLE()
    {
        EncryptedText = await LocalStorage.GetItemAsync<string>("SampleKey");
        APIKey = await EncryptProvider.Decrypt<string>(EncryptedText);
        try
        {
            string apiKey = APIKey;
            var openai = new OpenAIAPI(apiKey);
            var imageRequest = new ImageGenerationRequest(message, 1, ImageSize._512, "url");
            var imageResult = await openai.ImageGenerations.CreateImageAsync(imageRequest);

            if (imageResult.Data != null && imageResult.Data.Count > 0)
            {
                var imageUrl = imageResult.Data[0].Url.Replace("\\", "");
                generatedText = $"<img src=\"{imageUrl}\"/>";
                Messages.Add(new Message { Content = message, IsUserMessage = true });
                Messages.Add(new Message { Content = generatedText, IsUserMessage = false, IsImage = true });
            }

        }
        catch (HttpRequestException ex) when (ex.Message.Contains("billing_hard_limit_reached"))
        {
            generatedText = "Oops! It looks like we've hit our billing limit. Please try again later.";
            Messages.Add(new Message { Content = generatedText, IsUserMessage = false });
        }
        catch (Exception ex)
        {
            generatedText = "Oops! Something went wrong. Please try again later.";
            Messages.Add(new Message { Content = generatedText, IsUserMessage = false });
        }

        StateHasChanged();
        message = "";
    }

    private async Task GetCompletions()
    {
        EncryptedText = await LocalStorage.GetItemAsync<string>("SampleKey");  //RETRIEVES FROM HERE
        APIKey = await EncryptProvider.Decrypt<string>(EncryptedText); //DECRYPTS HERE


        generatedText = "Finding Answer...";
        try
        {
            string apiKey = APIKey;     //PLACES HERE
            string answer = string.Empty;
            var openai = new OpenAIAPI(apiKey);
            CompletionRequest completion = new CompletionRequest();
            completion.Prompt = message;
            completion.Model = Model.DavinciText;
            completion.MaxTokens = 4000;
            var result = await openai.Completions.CreateCompletionAsync(completion);

            if (result != null)
            {
                foreach (var item in result.Completions)
                {
                    GPT3Response.Response = item.Text;
                }
                generatedText = GPT3Response.Response;
                generatedText = GPT3Response.Response.Replace("§§", "").Replace("\\n", "<br>");
                // Add user message to the list
                Messages.Add(new Message { Content = message, IsUserMessage = true });

                // Add GPT response to the list
                Messages.Add(new Message { Content = GPT3Response.Response, IsUserMessage = false });


            }

            StateHasChanged();
            message = "";
        }

        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task GetChat()
    {
        EncryptedText = await LocalStorage.GetItemAsync<string>("SampleKey");
        APIKey = await EncryptProvider.Decrypt<string>(EncryptedText);

        generatedText = "Finding Answer...";
        try
        {
            string apiKey = APIKey;
            var openai = new OpenAIAPI(apiKey);
            ChatRequest chatRequest = new ChatRequest();
            chatRequest.Messages = new List<ChatMessage>();
            chatRequest.Model = Model.ChatGPTTurbo;
            chatRequest.MaxTokens = 4000;

            chatRequest.Messages.Add(new ChatMessage() { Role = ChatMessageRole.System, Content = "You are a helpful assistant." });
            chatRequest.Messages.Add(new ChatMessage() { Role = ChatMessageRole.User, Content = message });

            var chatResult = await openai.Chat.CreateChatCompletionAsync(chatRequest);

            if (chatResult != null)
            {
                var assistantMessage = chatResult.Choices[0].Message;

                if (assistantMessage != null)
                {
                    GPT3Response.Response = assistantMessage.Content;
                    generatedText = GPT3Response.Response.Replace("§§", "").Replace("\\n", "<br>");
                }
            }

            // Add user message to the list
            Messages.Add(new Message { Content = message, IsUserMessage = true });

            // Add GPT response to the list
            Messages.Add(new Message { Content = GPT3Response.Response, IsUserMessage = false });

            StateHasChanged();
            message = "";
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

}

