@page "/Image"
@using System.Net.Http.Json
@inject HttpClient Http
@inject ISyncLocalStorageService localStorage

<PageTitle>MyDALLEImage</PageTitle>

<div class="h1 mb-4 text-center">
    DALL-E Image Generation
</div>

<div class="form-group text-center">
    <h5>Add API Key to local storage</h5>
    <input class="form-control my-4 text-center py-2 m-auto" style="max-width:600px;" type="text" @bind="Name" placeholder="Enter a value" />
    <div class="input-group-append">
        <button class="btn btn-primary mb-4 px-2" style="max-width:200px;" @onclick="SaveName">Save</button>
    </div>
</div>

<div class="form-group text-center">
    <input class="form-control my-4 text-center py-2 m-auto" style="max-width:600px;" type="text" @bind="@prompt"
           placeholder="Type your image prompt here" />
    <button class="btn btn-success mb-4 px-2" style="max-width:200px;" @onclick="@GenerateImageFromDALLE">
        Generate
        Image
    </button>
</div>

@if (!string.IsNullOrEmpty(imageUrl))
{
    <div class="d-flex justify-content-center">
        <img src="@imageUrl" alt="Generated Image" class="img-fluid" />
    </div>
}

@code {
    private string prompt = "";
    private string imageUrl = "";

    private async Task GenerateImageFromDALLE()
    {
        try
        {
            string apiKey = @NameFromLocalStorage;
            var request = new HttpRequestMessage(HttpMethod.Post, "https://api.openai.com/v1/images/generations");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", apiKey);
            request.Content = JsonContent.Create(new
            {
                prompt,
                n = 1,
                size = "512x512",
            });

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ImageGenerationResult>();
                imageUrl = result.Data[0].Url;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error generating image: " + ex.Message);
        }
    }

    string Name { get; set; } = "";
    void SaveName()
    {
        Console.WriteLine(Name);
        localStorage.SetItem("name", Name);
        GetNameFromLocalStorage();
        Name = "";
    }
    string NameFromLocalStorage { get; set; } = "Nothing Saved";
    void GetNameFromLocalStorage()
    {
        try
        {
            NameFromLocalStorage = localStorage.GetItem<string>("name");

            if (string.IsNullOrEmpty(NameFromLocalStorage))
            {
                NameFromLocalStorage = "Nothing Saved";
            }
        }
        catch (Exception)
        {
            Console.WriteLine("error reading 'name'");
        }
    }

    public class ImageGenerationResult
    {
        public List<ImageData> Data { get; set; }
    }

    public class ImageData
    {
        public string Url { get; set; }
    }
}
