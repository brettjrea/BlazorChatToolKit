@page "/encrypt"
@using BlazorChatToolKit.Shared
@using BlazorChatToolKit.Shared.EncryptProviders
@using Blazored.SessionStorage
@using Blazored.LocalStorage
@inject IJSRuntime Js
<div class="container">
<div class="row">
        <div class="col-md-12">
            <h1>Encryption</h1>
            Followed guide from <a href="@("https://github.com/mahdiit/blazor-wasm-encryptstorage/tree/main")">mahdiit/blazor-wasm-encryptstorage</a>
        </div>

    <div class="row mt-4">
        <div>
            <div>
                    <div class="form-group">
                        <label>Combined buttons:</label>
                        <input type="text" class="form-control my-4 text-center py-2 m-auto" style="max-width:600px;" @bind-value="@OriginalText" />
                    </div>

                    <div class="form-group text-center">
                        <button class="btn btn-primary mb-4 px-2" style="max-width:200px;" @onclick="@EncryptandStore">EncryptandStore</button>&nbsp;
                        <button class="btn btn-success mb-4 px-2" style="max-width:200px;" @onclick="@ReadandDecrypt">DecryptandRead</button>

                    </div>
                    <hr>


                <div class="form-group">
                    <label>Seperate buttons: </label>
                        <br> <br>
                    <label>Original text: </label>
                    <input type="text" class="form-control my-4 text-center py-2 m-auto" style="max-width:600px;" @bind-value="@OriginalText" />
                </div>

                <div class="form-group text-center">
                    <button class="btn btn-primary mb-4 px-2" style="max-width:200px;" @onclick="@DoEncrypt">Encrypt</button>&nbsp;
                    <button class="btn btn-success mb-4 px-2" style="max-width:200px;" @onclick="@DoDecrypt">Decrypt</button>
                        <div class="form-group text-center">
                            <button class="btn btn-danger mb-4 px-2" style="max-width:200px;" @onclick="@DoClear">Clear TextBox</button>
                        </div>
                </div>

                <div class="form-group">
                    <label>Encrypted Text:</label>
                    <input type="text" class="form-control my-4 text-center py-2 m-auto" style="max-width:600px;" @bind-value="@EncryptedText" />
                </div>

                <div class="form-group text-center">
                    <button class="btn btn-primary mb-4 px-2" style="max-width:200px;" @onclick="@DoStore">Store in Session and Local</button>&nbsp;
                    <button class="btn btn-success mb-4 px-2" style="max-width:200px;" @onclick="@ReadStore">Read from store</button>
                </div>

            </div>




        </div>
    </div>
   </div>
</div>


@code {
    [Inject] IEncryptProvider? EncryptProvider { get; set; }
    [Inject] ISessionStorageService? SessionStorage { get; set; }
    [Inject] ILocalStorageService? LocalStorage { get; set; }

    public string OriginalText { get; set; } = "";
    public string EncryptedText { get; set; } = "";

    async Task DoClear()
    {
        EncryptedText = "";
        OriginalText = "";
        await Js.InvokeVoidAsync("alert", "Cleared");
    }

    async Task DoEncrypt()
    {
        EncryptedText = await EncryptProvider.Encrypt(OriginalText);
        await Js.InvokeVoidAsync("alert", "Encrypt Complete");
    }

    async Task DoDecrypt()
    {
        OriginalText = await EncryptProvider.Decrypt<string>(EncryptedText);
        await Js.InvokeVoidAsync("alert", "Decrypt Complete");
    }

    async Task DoStore()
    {
        await SessionStorage.SetItemAsync<string>("SampleKey", EncryptedText);
        await LocalStorage.SetItemAsync<string>("SampleKey", EncryptedText);

        await Js.InvokeVoidAsync("alert", "Information added to store");
    }

    async Task ReadStore()
    {
        EncryptedText = await SessionStorage.GetItemAsync<string>("SampleKey");
        await Js.InvokeVoidAsync("alert", "Store Read Complete");
    }

    async Task EncryptandStore()
    {
        EncryptedText = await EncryptProvider.Encrypt(OriginalText);
        await Js.InvokeVoidAsync("alert", "Encrypt Complete");
        await LocalStorage.SetItemAsync<string>("SampleKey", EncryptedText);
        await Js.InvokeVoidAsync("alert", "Information added to store");
    }
    async Task ReadandDecrypt()
    {
        EncryptedText = await LocalStorage.GetItemAsync<string>("SampleKey");
        await Js.InvokeVoidAsync("alert", "Store Read Complete");
        OriginalText = await EncryptProvider.Decrypt<string>(EncryptedText);
        await Js.InvokeVoidAsync("alert", "Decrypt Complete");

    }


}